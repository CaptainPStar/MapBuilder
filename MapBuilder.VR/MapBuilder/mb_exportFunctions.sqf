//################################################
//# Map Builder Export Functions
//# Author: Dennis "NeoArmageddon" Meyer
//# For instructions and license see readme-file
//################################################

MB_fnc_exportTB = {
	startLoadingScreen ["Exporting Terrain Builder file..."];
	_filename = [_this,0,"noFilename"] call bis_fnc_param;
	if(_filename == "") exitWith {systemChat "Error: Export needs a name!";endLoadingScreen;};
	_path = ("MB_FileIO" callExtension format["open_w|export\%1.txt",_filename]);
	systemChat format["Opening %1",_path];
	_count = 0;
	_mapframeX = 200000;
	_mapframeY = 0;
	{
		if(!isNull(_x)) then {
			_obj = _x;
			
			_model = getText (configFile >> "CfgVehicles" >> (typeof _obj) >> "model");
			_model = toLower(_model);
			
			_pos = _obj getvariable "MB_ObjVar_PositionATL";
			_pitch = _obj getvariable "MB_ObjVar_Pitch";
			_bank = _obj getvariable "MB_ObjVar_Bank";
			_yaw = _obj getvariable "MB_ObjVar_Yaw";
			_scale = _obj getvariable "MB_ObjVar_Scale";
			_pos set[0,((_pos select 0)+_mapframeX)];
			_pos set[1,((_pos select 1)+_mapframeY)];
			//Split modelname into parts
			_model = [_model,"\"] call BIS_fnc_splitString;
			//Extract last part (model.p3d) and split into name and extension
			_model = [(_model select (count(_model)-1)),"."] call BIS_fnc_splitString;
			//Use extension
			_model = _model select 0;
			
			//_name;_x_pos;_y_pos;_yaw;_pitch;_roll;_scale;_z_pos_rel;
			

			_string = format["write|""%1"";%2;%3;%4;%5;%6;%7;%8",_model,(_pos select 0),(_pos select 1),_yaw,_pitch,_bank,_scale,(_pos select 2)];
			systemChat ("MB_FileIO" callExtension _string);
			
		};
		_count = _count + 1;
		progressLoadingScreen (_count/count(MB_Objects));
	} foreach MB_Objects;
	systemChat ("MB_FileIO" callExtension "close");
	systemchat format["%1 objects exported to %2.",_count,_path];
	endLoadingScreen;
};
MB_fnc_exportSQF = {
	startLoadingScreen ["Exporting scriptfile..."];
	_filename = [_this,0,"noFilename"] call bis_fnc_param;
	if(_filename == "") exitWith {systemChat "Error: Export needs a name!";endLoadingScreen;};
	_path = ("MB_FileIO" callExtension format["open_w|export\%1.sqf",_filename]);
	systemChat format["Opening %1",_path];
	private["_number","_digits","_acc"];
	"MB_FileIO" callExtension "write|//This file was generated by Map Builder";
	"MB_FileIO" callExtension "write|//To load this objects copy this script to your mission and put";
	"MB_FileIO" callExtension format["write|// nil = [] execVM ""%1.sqf"";",_filename];
	"MB_FileIO" callExtension "write|//in your init.sqf or a trigger-activation.";
	systemChat ("MB_FileIO" callExtension "write|private[""_obj""];");
	_count = 0;
	{
		if(!isNull(_x)) then {
			_obj = _x;

		
			_type = (typeof _obj);
			_obj = _x;
			
			_pos = _obj getvariable "MB_ObjVar_PositionATL";
			_pitch = _obj getvariable "MB_ObjVar_Pitch";
			_bank = _obj getvariable "MB_ObjVar_Bank";
			_yaw = _obj getvariable "MB_ObjVar_Yaw";
			//_scale = _obj getvariable "MB_ObjVar_Scale";
			
			_dirAndUp = [_pitch,_bank,_yaw] call MB_fnc_CalcDirAndUpVector;
			_string = format["write|_obj = ""%1"" createvehicle [%2,%3,%4];",_type,_pos select 0,_pos select 1,_pos select 2];
			systemChat ("MB_FileIO" callExtension _string);
			_string = format["write|_obj setposATL [%1,%2,%3];",_pos select 0,_pos select 1,_pos select 2];
			systemChat ("MB_FileIO" callExtension _string);
			_string = format["write|_obj setVectorDirAndUp %1;",_dirAndUp];
			systemChat ("MB_FileIO" callExtension _string);
			_string = format["write|_obj setposATL [%1,%2,%3];",_pos select 0,_pos select 1,_pos select 2];
			systemChat ("MB_FileIO" callExtension _string);
		};
		_count = _count + 1;
		progressLoadingScreen (_count/count(MB_Objects));
	} foreach MB_Objects;
	systemChat ("MB_FileIO" callExtension "close");
	systemchat format["%1 objects exported to %2.",_count,_path];
	endLoadingScreen;
};
MB_fnc_exportComposition = {
	_filename = [_this,0,"noFilename"] call bis_fnc_param;
	if(_filename == "") exitWith {systemChat "Error: Export needs a name!";};
	_path = ("MB_FileIO" callExtension format["open_w|export\%1.sqf",_filename]);
	systemChat format["Opening %1",_path];
	private["_number","_digits","_acc"];
	_selectionCenter = [] call MB_fnc_calcSelectionCenter;
	"MB_FileIO" callExtension "write|//This file was generated by Map Builder";
	"MB_FileIO" callExtension "write|//To load this objects copy this script to your mission and put";
	"MB_FileIO" callExtension format["write|// nil = [] execVM ""%1.sqf"";",_filename];
	"MB_FileIO" callExtension "write|//in your init.sqf or a trigger-activation.";
	"MB_FileIO" callExtension "write|private[""_obj"",""_objpos"",""_dir""];";
	"MB_FileIO" callExtension "write|_pos = [_this,0] call bis_fnc_param;";
	{
		if(!isNull(_x)) then {
			_obj = _x;
			_type = (typeof _obj);

			
			_pos = _obj getvariable "MB_ObjVar_PositionATL";
			_pitch = _obj getvariable "MB_ObjVar_Pitch";
			_bank = _obj getvariable "MB_ObjVar_Bank";
			_yaw = _obj getvariable "MB_ObjVar_Yaw";
			//_scale = _obj getvariable "MB_ObjVar_Scale";
			
			_dirAndUp = [_pitch,_bank,_yaw] call MB_fnc_CalcDirAndUpVector;
			_string = format["write|_objpos = _pos vectoradd %1;",_pos vectorDiff _selectionCenter];
			systemChat ("MB_FileIO" callExtension _string);
			_string = format["write|_obj = ""%1"" createvehicle _objpos;",_type];
			systemChat ("MB_FileIO" callExtension _string);
			_string = format["write|_dir = %1;",_yaw];
			systemChat ("MB_FileIO" callExtension _string);

		};
	} foreach MB_Selected;
	systemChat ("MB_FileIO" callExtension "close");

};




MB_fnc_exportSQM = {
	startLoadingScreen ["Exporting mission..."];
	_filename = [_this,0,"noFilename"] call bis_fnc_param;
	if(_filename == "") exitWith {systemChat "Error: Export needs a name!";endLoadingScreen;};
	_path = ("MB_FileIO" callExtension format["open_w|export\%1.sqm",_filename]);
	systemChat format["Opening %1",_path];
	private["_number","_digits","_acc"];
	version=12;

	"MB_FileIO" callExtension "write|version=12;";
	"MB_FileIO" callExtension "write|class Mission {";
	"MB_FileIO" callExtension "write|addOns[]= {};";
	"MB_FileIO" callExtension "write|addOnsAuto[]= {};";
	"MB_FileIO" callExtension "write|class Intel{};";
	"MB_FileIO" callExtension "write|class Vehicles {";
	_total = ({!isNull _x} count MB_Objects);
	"MB_FileIO" callExtension format["write|items=%1;",_total];
	_count = 0;
	{
		if(!isNull(_x)) then {
			_obj = _x;


			_type = (typeof _obj);
			_pos = _obj getvariable "MB_ObjVar_PositionATL";
			_pitch = _obj getvariable "MB_ObjVar_Pitch";
			_bank = _obj getvariable "MB_ObjVar_Bank";
			_yaw = _obj getvariable "MB_ObjVar_Yaw";

					
			
			_dirAndUp = [_pitch,_bank,_yaw] call MB_fnc_CalcDirAndUpVector;
			"MB_FileIO" callExtension format["write|class Item%1 {",_count];
			"MB_FileIO" callExtension format["write|position[]={%1,%3,%2};",_pos select 0, _pos select 1, _pos select 2];
			"MB_FileIO" callExtension format["write|azimut=%1;",_yaw];
			"MB_FileIO" callExtension format["write|offsetY=%1;",_pos select 2];
			"MB_FileIO" callExtension format["write|id=%1;",_count];
			"MB_FileIO" callExtension "write|side=""EMPTY"";";
			"MB_FileIO" callExtension format["write|vehicle=""%1"";",typeof _obj];
			"MB_FileIO" callExtension "write|skill=0.6;";
			"MB_FileIO" callExtension format["write|init=""this setVectorDirAndUp %1;"";",_dirAndUp];
			"MB_FileIO" callExtension "write|};";
			_count = _count + 1;
		};
		
		progressLoadingScreen (_count/_total);
	} foreach MB_Objects;
	"MB_FileIO" callExtension "write|};";
	"MB_FileIO" callExtension "write|};";

"MB_FileIO" callExtension "write|class Intro {";
	"MB_FileIO" callExtension "write|addOns[]={};";
	"MB_FileIO" callExtension "write|addOnsAuto[]={};";
	"MB_FileIO" callExtension "write|randomSeed=2744005;";
	"MB_FileIO" callExtension "write|class Intel{};";
"MB_FileIO" callExtension "write|};";
"MB_FileIO" callExtension "write|class OutroWin";
"MB_FileIO" callExtension "write|{";
	"MB_FileIO" callExtension "write|addOns[]={};";
	"MB_FileIO" callExtension "write|addOnsAuto[]={};";
	"MB_FileIO" callExtension "write|randomSeed=2744005;";
	"MB_FileIO" callExtension "write|class Intel{};";
"MB_FileIO" callExtension "write|};";
"MB_FileIO" callExtension "write|class OutroLoose";
"MB_FileIO" callExtension "write|{";
	"MB_FileIO" callExtension "write|addOns[]={};";
	"MB_FileIO" callExtension "write|addOnsAuto[]={};";
	"MB_FileIO" callExtension "write|randomSeed=2744005;";
	"MB_FileIO" callExtension "write|class Intel{};";
"MB_FileIO" callExtension "write|};";
	
	systemChat ("MB_FileIO" callExtension "close");
	systemchat format["%1 objects exported to %2.",_count,_path];
	endLoadingScreen;
};
MB_fnc_import = {

};
MB_fnc_loadProjectOld = {
	private["_filename"];
	_filename = [_this,0,"Unknown_Project"] call bis_fnc_param;
	if(_filename == "") exitWith {systemChat "Error: Projects needs a name!";};
	[] call MB_fnc_DeleteAllObjects;
	MB_ProjectName = _filename;
	[_filename] call MB_fnc_importProject;
};
MB_fnc_saveProjectOld = {
	private["_filename","_pos","_zPos","_dir","_pitch","_bank","_scale","_layer","_type"];
	startLoadingScreen ["Saving project..."];
	_filename = [_this,0,"Unknown_Project"] call bis_fnc_param;
	if(_filename == "") exitWith {systemChat "Error: Projects needs a name!";endLoadingScreen;};
	MB_ProjectName = _filename;
	[2,false] call MB_fnc_togglePopup;
	_path = ("MB_FileIO" callExtension format["open_w|projects\%1.mbp",_filename]);
	systemChat format["Opening %1",_path];
	_count = 0;
	{
		if(!isNull(_x)) then {
			_obj = _x;

			_type =(typeof _obj);
			
			_scale = 1;
		
			
			_pos = _obj getvariable "MB_ObjVar_PositionATL";
			_pitch = _obj getvariable "MB_ObjVar_Pitch";
			_bank = _obj getvariable "MB_ObjVar_Bank";
			_yaw = _obj getvariable "MB_ObjVar_Yaw";
			_simulate = _obj getvariable "MB_ObjVar_Simulate";
			_locked = _obj getvariable "MB_ObjVar_Locked";
			
			
			_layer = 0;
			_string = format["write|%1;%2;%3;%4;%5;%6;%7;%8;%9",_layer,_type,(_pos select 0),(_pos select 1),(_pos select 2),_yaw,_pitch,_bank,_scale];
			systemChat _string;
			systemChat ("MB_FileIO" callExtension _string);
		};
		_count = _count + 1;
		progressLoadingScreen (_count/count(MB_Objects));
	} foreach MB_Objects;
	systemChat ("MB_FileIO" callExtension "close");
	systemchat format["Project saved!"];
	endLoadingScreen;
};
MB_fnc_importProjectOld = {
	private["_filename"];
	startLoadingScreen ["Loading project..."];
	_filename = [_this,0,"Unknown_Project"] call bis_fnc_param;
	if(_filename == "") exitWith {systemChat "Error: Can't load a project without name!";endLoadingScreen;};
	_projectFolder = ("MB_FileIO" callExtension "listfiles|projects");
	_projects = [_projectFolder,"|"] call BIS_fnc_splitString;
	if((_projects find format["%1.mbp",_filename])==-1) exitwith {systemChat "Error: Project not found!"};
	[2,false] call MB_fnc_togglePopup;
	_path = ("MB_FileIO" callExtension format["open_r|projects\%1.mbp",_filename]);
	systemChat format["Opening %1",_path];
	
	_line = "MB_FileIO" callExtension "readline";
	while{_line != "EOF"} do {
		private["_obj","_type","_layer","_pos","_dir","_pitch","_bank","_scale"];
		systemChat _line;
		_object = [_line,";"] call BIS_fnc_splitString;
		systemChat format["%1",_object];
		_type = (_object select 1);
		_pos = [parseNumber (_object select 2),parseNumber (_object select 3),parseNumber (_object select 4)]; //Position
		_layer = parseNumber (_object select 0);//Layer
		_dir =	parseNumber (_object select 5);	//Dir
		_pitch = parseNumber (_object select 6);	//Pitch
		_bank =	parseNumber (_object select 7);	//Bank
		_scale=	parseNumber (_object select 8); //Scale
		
		_obj = [_type,_pos] call MB_fnc_CreateObject;
		_obj setvariable["MB_ObjVar_PositionATL",_pos,false];
		_obj setvariable["MB_ObjVar_Pitch",_pitch,false];
		_obj setvariable["MB_ObjVar_Bank",_bank,false];
		_obj setvariable["MB_ObjVar_Yaw",_dir,false];
		systemchat format["Bank is %1",_bank];

		[_obj] call MB_fnc_UpdateObject;
		
		//systemchat format["[%1,%2,%3]",parseNumber (_object select 2),parseNumber (_object select 3),parseNumber (_object select 4)];
		_line = "MB_FileIO" callExtension "readline";
	};
	systemChat ("MB_FileIO" callExtension "close");
	[] call MB_fnc_updateUsed;
	endLoadingScreen;
};
MB_fnc_roundNumbers = {
private["_number","_digits","_acc"];
	_number = [_this,0,0] call bis_fnc_param;
	_digits = [_this,1,4] call bis_fnc_param;
	//Accuracy is 5 digits
	_acc = 10^_digits;
	_number = round((_number)*_acc)/_acc;
	_number;
};

MB_nextProjectAutosave = -1;
MB_fnc_autosave = {
	if(time>=MB_nextProjectAutosave && MB_nextProjectAutosave>0) then {
		["autosave"] call MB_fnc_saveProject;
		MB_nextProjectAutosave = time + MB_autosaveInterval;
	};
};
MB_fnc_clearProject = {
	["clearedProject"] call MB_fnc_saveProject;
	{
		if(!isNull(_x)) then {
			[_x] call MB_fnc_DeleteObject;
		};
	} foreach MB_Objects;
	
	MB_Objects = [];
	MB_NUID = 0;
	publicvariable "MB_NUID";
	MB_FavoriteObjects = [];
	[] call MB_fnc_updateFavorites;
	[] call MB_fnc_updateUsed;
	MB_ProjectName = "";
};
MB_fnc_saveProject = {
	private["_filename"];
	_filename = [_this,0,"project"] call bis_fnc_param;
	if(_filename == "") exitWith {systemChat "Error: Projects needs a name!";};
	_path = ("MB_FileIO" callExtension format["open_w|projects\%1.mbproj",_filename]);
	systemChat format["Opening %1",_path];
	MB_ProjectName = _filename;
	{
		if(!isNull(_x)) then {
			_obj = _x;
			_type = typeof _obj;
			_vars = [_obj] call MB_fnc_getObjectVars;
			
			_string = ["object",[_type,_vars]] call MB_fnc_toStoreArr;
			
			"MB_FileIO" callExtension format["write|%1",_string];
		};
	} foreach MB_Objects;
	{
		_string = ["favoriteObj",[_x]] call MB_fnc_toStoreArr;	
		"MB_FileIO" callExtension format["write|%1",_string];
	
	} foreach MB_FavoriteObjects;
	"MB_FileIO" callExtension "close";
	systemchat format["Project saved!"];
};
MB_fnc_loadProject = {
	private["_filename"];
	_filename = [_this,0,"Unknown_Project"] call bis_fnc_param;
	if(_filename == "") exitWith {systemChat "Error: Projects needs a name!";};
	systemChat format["Loading project %1",_filename];
	[] call MB_fnc_clearProject;
	MB_ProjectName = _filename;
	[_filename] call MB_fnc_importProject;
};
MB_fnc_importProject = {
	private["_filename"];
	//startLoadingScreen ["Loading project..."];
	_filename = [_this,0,"Unknown_Project"] call bis_fnc_param;
	if(_filename == "") exitWith {systemChat "Error: Can't load a project without name!";};
	_projectFolder = ("MB_FileIO" callExtension "listfiles|projects");
	_projects = [_projectFolder,"|"] call BIS_fnc_splitString;
	if((_projects find format["%1.mbproj",_filename])==-1) exitwith {
		//Load old file here
		if((_projects find format["%1.mbp",_filename])==-1) then {
			systemChat "Error: Project not found!";
		} else {
			systemChat "Loading old project format.";
			[_filename] spawn MB_fnc_importProjectOld;
		};
	};
	[2,false] call MB_fnc_togglePopup;
	_path = ("MB_FileIO" callExtension format["open_r|projects\%1.mbproj",_filename]);
	systemChat format["Opening %1",_path];
	
	_line = "MB_FileIO" callExtension "readline";
	while{_line != "EOF"} do {
		private["_obj","_type","_layer","_pos","_dir","_pitch","_bank","_scale"];
		_arr = [_line] call MB_fnc_loadStoreArr;
		_lineType = (_arr select 0);
		switch (_lineType) do {
			case "object": {
				//Recreate an object
				_type = (_arr select 1) select 0;
				_vars =  (_arr select 1) select 1;
				_obj = [_type,_vars select 0] call MB_fnc_CreateObject;
				[_obj,_vars] call MB_fnc_setObjectVars;
			};
			case "favoriteObj": {
				//Load a favorited object
				_type = (_arr select 1) select 0;
				[_type] call MB_fnc_AddFavorite;
			};
			default { 
				systemChat format["Unknown project property: %1",_lineType]; 
			};
		};
		//systemchat format["[%1,%2,%3]",parseNumber (_object select 2),parseNumber (_object select 3),parseNumber (_object select 4)];
		_line = "MB_FileIO" callExtension "readline";
	};
	systemChat ("MB_FileIO" callExtension "close");
	[] call MB_fnc_updateUsed;
	systemchat format["Project loaded/imported!"];
};
MB_fnc_toStoreArr = {
	private["_key","_array","_return"];
	_key = [_this,0,"unknown"] call bis_fnc_param;
	_array = [_this,1,[]] call bis_fnc_param;
	_return = format["[""%1"",%2]",_key,_array];
	_return;
};
MB_fnc_loadStoreArr = {
private["_line","_object"];
	_line = [_this,0,"[]"] call bis_fnc_param;
	_object = call compile _line;
	_object;
};